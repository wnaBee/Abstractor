#include <map>
#include <string>
using namespace std;
namespace kwd {
	enum Options{
		Option_Invalid,
		assert,
		isalpha,
		isblank,
		iscntrl,
		isdigit,
		isgraph,
		islower,
		isprint,
		ispunct,
		isspace,
		isupper,
		isxdigit,
		tolower,
		toupper,
		errno,
		feclearexcept,
		feraiseexcept,
		fegetexceptflag,
		fesetexceptflag,
		fegetround,
		fesetround,
		fegetenv,
		fesetenv,
		feholdexcept,
		feupdateenv,
		fetestexcept,
		fenv_t,
		fexcept_t,
		FE_DIVBYZERO,
		FE_INEXACT,
		FE_INVALID,
		FE_OVERFLOW,
		FE_UNDERFLOW,
		FE_ALL_EXCEPT,
		FE_DOWNWARD,
		FE_TONEAREST,
		FE_TOWARDZERO,
		FE_UPWARD,
		FE_DFL_ENV,
		FENV_ACCESS,
		climits,
		cfloat,
		structlconv,
		setlocale,
		localeconv,
		cos,
		sin,
		tan,
		acos,
		asin,
		atan,
		atan2,
		cosh,
		sinh,
		tanh,
		acosh,
		asinh,
		atanh,
		exp,
		frexp,
		ldexp,
		log,
		log10,
		modf,
		exp2,
		expm1,
		ilogb,
		log1p,
		log2,
		logb,
		scalbn,
		scalbln,
		pow,
		sqrt,
		cbrt,
		hypot,
		erf,
		erfc,
		tgamma,
		lgamma,
		ceil,
		floor,
		fmod,
		trunc,
		round,
		lround,
		llround,
		rint,
		lrint,
		llrint,
		nearbyint,
		remainder,
		remquo,
		copysign,
		nan,
		nextafter,
		nexttoward,
		fdim,
		fmax,
		fmin,
		fabs,
		abs,
		fma,
		fpclassify,
		isfinite,
		isinf,
		isnan,
		isnormal,
		signbit,
		isgreater,
		isgreaterequal,
		isless,
		islessequal,
		islessgreater,
		isunordered,
		math_errhandling,
		INFINITY,
		NAN,
		HUGE_VAL,
		HUGE_VALF,
		HUGE_VALL,
		double_t,
		float_t,
		longjmp,
		setjmp,
		jmp_buf,
		signal,
		raise,
		sig_atomic_t,
		va_list,
		va_start,
		va_arg,
		va_end,
		va_copy,
		ptrdiff_t,
		size_t,
		max_align_t,
		nullptr_t,
		offsetof,
		NULL,
		remove,
		rename,
		tmpfile,
		tmpnam,
		fclose,
		fflush,
		fopen,
		freopen,
		setbuf,
		setvbuf,
		fprintf,
		fscanf,
		printf,
		scanf,
		snprintf,
		sprintf,
		sscanf,
		vfprintf,
		vfscanf,
		vprintf,
		vscanf,
		vsnprintf,
		vsprintf,
		vsscanf,
		fgetc,
		fgets,
		fputc,
		fputs,
		getc,
		getchar,
		gets,
		putc,
		putchar,
		puts,
		ungetc,
		fread,
		fwrite,
		fgetpos,
		fseek,
		fsetpos,
		ftell,
		rewind,
		clearerr,
		feof,
		ferror,
		perror,
		BUFSIZ,
		EOF,
		FILENAME_MAX,
		FOPEN_MAX,
		L_tmpnam,
		TMP_MAX,
		FILE,
		fpos_t,
		atof,
		atoi,
		atol,
		atoll,
		strtod,
		strtof,
		strtol,
		strtold,
		strtoll,
		strtoul,
		strtoull,
		rand,
		srand,
		calloc,
		free,
		malloc,
		realloc,
		abort,
		atexit,
		at_quick_exit,
		exit,
		getenv,
		quick_exit,
		system,
		_Exit,
		bsearch,
		qsort,
		div,
		labs,
		ldiv,
		llabs,
		lldiv,
		mblen,
		mbtowc,
		wctomb,
		mbstowcs,
		wcstombs,
		EXIT_FAILURE,
		EXIT_SUCCESS,
		MB_CUR_MAX,
		RAND_MAX,
		div_t,
		ldiv_t,
		lldiv_t,
		memcpy,
		memmove,
		strcpy,
		strncpy,
		strcat,
		strncat,
		memcmp,
		strcmp,
		strcoll,
		strncmp,
		strxfrm,
		memchr,
		strchr,
		strcspn,
		strpbrk,
		strrchr,
		strspn,
		strstr,
		strtok,
		memset,
		strerror,
		strlen,
		clock,
		difftime,
		mktime,
		time,
		asctime,
		ctime,
		gmtime,
		localtime,
		strftime,
		CLOCKS_PER_SEC,
		clock_t,
		time_t,
		structtm,
		c16rtomb,
		c32rtomb,
		mbrtoc16,
		mbrtoc32,
		fgetwc,
		fgetws,
		fputwc,
		fputws,
		fwide,
		fwprintf,
		fwscanf,
		getwc,
		getwchar,
		putwc,
		putwchar,
		swprintf,
		swscanf,
		ungetwc,
		vfwprintf,
		vfwscanf,
		vswprintf,
		vswscanf,
		vwprintf,
		vwscanf,
		wprintf,
		wscanf,
		wcstod,
		wcstof,
		wcstol,
		wcstold,
		wcstoll,
		wcstoul,
		wcstoull,
		btowc,
		mbrlen,
		mbrtowc,
		mbsinit,
		mbsrtowcs,
		wcrtomb,
		wctob,
		wcsrtombs,
		wcscat,
		wcschr,
		wcscmp,
		wcscoll,
		wcscpy,
		wcscspn,
		wcslen,
		wcsncat,
		wcsncmp,
		wcsncpy,
		wcspbrk,
		wcsrchr,
		wcsspn,
		wcsstr,
		wcstok,
		wcsxfrm,
		wmemchr,
		wmemcmp,
		wmemcpy,
		wmemmove,
		wmemset,
		wcsftime,
		mbstate_t,
		wchar_t,
		wint_t,
		WCHAR_MAX,
		WCHAR_MIN,
		WEOF,
		iswalnum,
		iswalpha,
		iswblank,
		iswcntrl,
		iswdigit,
		iswgraph,
		iswlower,
		iswprint,
		iswpunct,
		iswspace,
		iswupper,
		iswxdigit,
		towlower,
		towupper,
		iswctype,
		towctrans,
		wctrans,
		wctype,
		wctrans_t,
		wctype_t,
		array,
		end,
		bitset,
		deque,
		forward_list,
		list,
		map,
		multimap,
		queue,
		priority_queue,
		set,
		multiset,
		stack,
		unordered_map,
		unordered_multimap,
		unordered_set,
		unordered_multiset,
		vector,
		atomic,
		atomic_flag,
		memory_order,
		kill_dependency,
		atomic_thread_fence,
		atomic_signal_fence,
		atomic_is_lock_free,
		atomic_init,
		atomic_store,
		atomic_store_explicit,
		atomic_load,
		atomic_load_explicit,
		atomic_exchange,
		atomic_exchange_explicit,
		atomic_compare_exchange_weak,
		atomic_compare_exchange_weak_explicit,
		atomic_compare_exchange_strong,
		atomic_compare_exchange_strong_explicit,
		atomic_fetch_add,
		atomic_fetch_add_explicit,
		atomic_fetch_sub,
		atomic_fetch_sub_explicit,
		atomic_fetch_and,
		atomic_fetch_and_explicit,
		atomic_fetch_or,
		atomic_fetch_or_explicit,
		atomic_fetch_xor,
		atomic_fetch_xor_explicit,
		atomic_flag_test_and_set,
		atomic_flag_test_and_set_explicit,
		atomic_flag_clear,
		atomic_flag_clear_explicit,
		ATOMIC_VAR_INIT,
		ATOMIC_FLAG_INIT,
		condition_variable,
		condition_variable_any,
		cv_status,
		notify_all_at_thread_exit,
		promise,
		packaged_task,
		future,
		shared_future,
		future_error,
		future_errc,
		future_status,
		launch,
		async,
		future_category,
		mutex,
		recursive_mutex,
		timed_mutex,
		recursive_timed_mutex,
		lock_guard,
		unique_lock,
		once_flag,
		adopt_lock_t,
		defer_lock_t,
		try_to_lock_t,
		try_lock,
		lock,
		call_once,
		thread,
		this_thread,
		all_of,
		any_of,
		none_of,
		for_each,
		find,
		find_if,
		find_if_not,
		find_end,
		find_first_of,
		adjacent_find,
		count,
		count_if,
		mismatch,
		equal,
		is_permutation,
		search,
		search_n,
		copy,
		copy_n,
		copy_if,
		copy_backward,
		move,
		move_backward,
		swap,
		swap_ranges,
		iter_swap,
		transform,
		replace,
		replace_if,
		replace_copy,
		replace_copy_if,
		fill,
		fill_n,
		generate,
		generate_n,
		remove_if,
		remove_copy,
		remove_copy_if,
		unique,
		unique_copy,
		reverse,
		reverse_copy,
		rotate,
		rotate_copy,
		random_shuffle,
		shuffle,
		is_partitioned,
		partition,
		stable_partition,
		partition_copy,
		partition_point,
		sort,
		stable_sort,
		partial_sort,
		partial_sort_copy,
		is_sorted,
		is_sorted_until,
		nth_element,
		lower_bound,
		upper_bound,
		equal_range,
		binary_search,
		merge,
		inplace_merge,
		includes,
		set_union,
		set_intersection,
		set_difference,
		set_symmetric_difference,
		push_heap,
		pop_heap,
		make_heap,
		sort_heap,
		is_heap,
		is_heap_until,
		min,
		max,
		minmax,
		min_element,
		max_element,
		minmax_element,
		lexicographical_compare,
		next_permutation,
		prev_permutation,
		duration,
		time_point,
		system_clock,
		steady_clock,
		high_resolution_clock,
		treat_as_floating_point,
		duration_values,
		common_type(duration)***,
		duration_cast,
		time_point_cast,
		hours,
		minutes,
		seconds,
		milliseconds,
		microseconds,
		nanoseconds,
		codecvt_mode,
		codecvt_utf8,
		codecvt_utf16,
		codecvt_utf8_utf16,
		complex,
		real,
		imag,
		arg,
		norm,
		conj,
		polar,
		proj,
		complexoperators,
		exception,
		bad_exception,
		nested_exception,
		exception_ptr,
		terminate_handler,
		unexpected_handler,
		terminate,
		get_terminate,
		set_terminate,
		unexpected,
		get_unexpected,
		set_unexpected,
		uncaught_exception,
		current_exception,
		rethrow_exception,
		make_exception_ptr,
		throw_with_nested,
		rethrow_if_nested,
		unary_function,
		binary_function,
		initializer_list,
		advance,
		distance,
		prev,
		next,
		back_inserter,
		front_inserter,
		inserter,
		make_move_iterator,
		iterator,
		iterator_traits,
		reverse_iterator,
		move_iterator,
		back_insert_iterator,
		front_insert_iterator,
		insert_iterator,
		istream_iterator,
		ostream_iterator,
		istreambuf_iterator,
		ostreambuf_iterator,
		input_iterator_tag,
		output_iterator_tag,
		forward_iterator_tag,
		bidirectional_iterator_tag,
		random_access_iterator_tag,
		numeric_limits,
		float_round_style,
		float_denorm_style,
		use_facet,
		has_facet,
		isalnum,
		locale,
		ctype,
		ctype_byname,
		codecvt,
		codecvt_byname,
		num_get,
		num_put,
		numpunct,
		numpunct_byname,
		collate,
		collate_byname,
		time_get,
		time_get_byname,
		time_put,
		time_put_byname,
		money_get,
		money_put,
		moneypunct,
		moneypunct_byname,
		messages,
		messages_byname,
		ctype_base,
		codecvt_base,
		time_base,
		money_base,
		allocator,
		allocator_arg,
		allocator_arg_t,
		allocator_traits,
		auto_ptr,
		auto_ptr_ref,
		shared_ptr,
		weak_ptr,
		unique_ptr,
		default_delete,
		make_shared,
		allocate_shared,
		static_pointer_cast,
		dynamic_pointer_cast,
		const_pointer_cast,
		get_deleter,
		owner_less,
		enable_shared_from_this,
		raw_storage_iterator,
		get_temporary_buffer,
		return_temporary_buffer,
		uninitialized_copy,
		uninitialized_copy_n,
		uninitialized_fill,
		uninitialized_fill_n,
		pointer_traits,
		pointer_safety,
		declare_reachable,
		undeclare_reachable,
		declare_no_pointers,
		undeclare_no_pointers,
		get_pointer_safety,
		align,
		addressof,
		operatornew,
		operatornew[],
		operatordelete,
		operatordelete[],
		set_new_handler,
		get_new_handler,
		nothrow_t,
		new_handler,
		bad_alloc,
		bad_array_new_length,
		nothrow,
		accumulate,
		adjacent_difference,
		inner_product,
		partial_sum,
		iota,
		linear_congruential_engine,
		mersenne_twister_engine,
		subtract_with_carry_engine,
		discard_block_engine,
		independent_bits_engine,
		shuffle_order_engine,
		default_random_engine,
		minstd_rand,
		minstd_rand0,
		mt19937,
		mt19937_64,
		ranlux24_base,
		ranlux48_base,
		ranlux24,
		ranlux48,
		knuth_b,
		random_device,
		uniform_int_distribution,
		uniform_real_distribution,
		bernoulli_distribution,
		binomial_distribution,
		geometric_distribution,
		negative_binomial_distribution,
		poisson_distribution,
		exponential_distribution,
		gamma_distribution,
		weibull_distribution,
		extreme_value_distribution,
		normal_distribution,
		lognormal_distribution,
		chi_squared_distribution,
		cauchy_distribution,
		fisher_f_distribution,
		student_t_distribution,
		discrete_distribution,
		piecewise_constant_distribution,
		piecewise_linear_distribution,
		seed_seq,
		generate_canonical,
		ratio,
		ratio_add,
		ratio_subtract,
		ratio_multiply,
		ratio_divide,
		ratio_equal,
		ratio_not_equal,
		ratio_less,
		ratio_less_equal,
		ratio_greater,
		ratio_greater_equal,
		regex_match,
		regex_search,
		regex_replace,
		regex_iterator,
		regex_token_iterator,
		basic_regex,
		match_results,
		sub_match,
		regex_traits,
		regex_error,
		regex,
		wregex,
		cmatch,
		wcmatch,
		smatch,
		wsmatch,
		csub_match,
		wcsub_match,
		ssub_match,
		wssub_match,
		regex_constants,
		ECMAScriptsyntax,
		begin,
		logic_error,
		domain_error,
		invalid_argument,
		length_error,
		out_of_range,
		runtime_error,
		range_error,
		overflow_error,
		underflow_error,
		basic_string,
		char_traits,
		string,
		u16string,
		u32string,
		wstring,
		stoi,
		stol,
		stoul,
		stoll,
		stoull,
		stof,
		stod,
		stold,
		to_string,
		to_wstring,
		error_category,
		error_code,
		error_condition,
		system_error,
		is_error_code_enum,
		is_error_condition_enum,
		errc,
		generic_category,
		system_category,
		make_error_code,
		make_error_condition,
		tuple,
		tuple_size,
		tuple_element,
		make_tuple,
		forward_as_tuple,
		tie,
		tuple_cat,
		get,
		ignore,
		type_index,
		hash,
		type_info,
		bad_cast,
		bad_typeid,
		integral_constant,
		true_type,
		false_type,
		is_array,
		is_class,
		is_enum,
		is_floating_point,
		is_function,
		is_integral,
		is_lvalue_reference,
		is_member_function_pointer,
		is_member_object_pointer,
		is_pointer,
		is_rvalue_reference,
		is_union,
		is_void,
		is_arithmetic,
		is_compound,
		is_fundamental,
		is_member_pointer,
		is_object,
		is_reference,
		is_scalar,
		is_abstract,
		is_const,
		is_empty,
		is_literal_type,
		is_pod,
		is_polymorphic,
		is_signed,
		is_standard_layout,
		is_trivial,
		is_trivially_copyable,
		is_unsigned,
		is_volatile,
		has_virtual_destructor,
		is_assignable,
		is_constructible,
		is_copy_assignable,
		is_copy_constructible,
		is_destructible,
		is_default_constructible,
		is_move_assignable,
		is_move_constructible,
		is_trivially_assignable,
		is_trivially_constructible,
		is_trivially_copy_assignable,
		is_trivially_copy_constructible,
		is_trivially_destructible,
		is_trivially_default_constructible,
		is_trivially_move_assignable,
		is_trivially_move_constructible,
		is_nothrow_assignable,
		is_nothrow_constructible,
		is_nothrow_copy_assignable,
		is_nothrow_copy_constructible,
		is_nothrow_destructible,
		is_nothrow_default_constructible,
		is_nothrow_move_assignable,
		is_nothrow_move_constructible,
		is_base_of,
		is_convertible,
		is_same,
		alignment_of,
		extent,
		rank,
		add_const,
		add_cv,
		add_volatile,
		remove_const,
		remove_cv,
		remove_volatile,
		add_pointer,
		add_lvalue_reference,
		add_rvalue_reference,
		decay,
		make_signed,
		make_unsigned,
		remove_all_extents,
		remove_extent,
		remove_pointer,
		remove_reference,
		underlying_type,
		aligned_storage,
		aligned_union,
		common_type,
		conditional,
		enable_if,
		result_of,
		valarray,
		slice,
		gslice,
		slice_array,
		gslice_array,
		mask_array,
		indirect_array,
		Valarray_operators
	};
	Options resolveOption(std::string input){
		static const std::map<std::string, Options> optionStrings {
			{ "assert", assert },
			{ "isalpha", isalpha },
			{ "isblank", isblank },
			{ "iscntrl", iscntrl },
			{ "isdigit", isdigit },
			{ "isgraph", isgraph },
			{ "islower", islower },
			{ "isprint", isprint },
			{ "ispunct", ispunct },
			{ "isspace", isspace },
			{ "isupper", isupper },
			{ "isxdigit", isxdigit },
			{ "tolower", tolower },
			{ "toupper", toupper },
			{ "errno", errno },
			{ "feclearexcept", feclearexcept },
			{ "feraiseexcept", feraiseexcept },
			{ "fegetexceptflag", fegetexceptflag },
			{ "fesetexceptflag", fesetexceptflag },
			{ "fegetround", fegetround },
			{ "fesetround", fesetround },
			{ "fegetenv", fegetenv },
			{ "fesetenv", fesetenv },
			{ "feholdexcept", feholdexcept },
			{ "feupdateenv", feupdateenv },
			{ "fetestexcept", fetestexcept },
			{ "fenv_t", fenv_t },
			{ "fexcept_t", fexcept_t },
			{ "FE_DIVBYZERO", FE_DIVBYZERO },
			{ "FE_INEXACT", FE_INEXACT },
			{ "FE_INVALID", FE_INVALID },
			{ "FE_OVERFLOW", FE_OVERFLOW },
			{ "FE_UNDERFLOW", FE_UNDERFLOW },
			{ "FE_ALL_EXCEPT", FE_ALL_EXCEPT },
			{ "FE_DOWNWARD", FE_DOWNWARD },
			{ "FE_TONEAREST", FE_TONEAREST },
			{ "FE_TOWARDZERO", FE_TOWARDZERO },
			{ "FE_UPWARD", FE_UPWARD },
			{ "FE_DFL_ENV", FE_DFL_ENV },
			{ "FENV_ACCESS", FENV_ACCESS },
			{ "<climits>", <climits> },
			{ "<cfloat>", <cfloat> },
			{ "structlconv", structlconv },
			{ "setlocale", setlocale },
			{ "localeconv", localeconv },
			{ "cos", cos },
			{ "sin", sin },
			{ "tan", tan },
			{ "acos", acos },
			{ "asin", asin },
			{ "atan", atan },
			{ "atan2", atan2 },
			{ "cosh", cosh },
			{ "sinh", sinh },
			{ "tanh", tanh },
			{ "acosh", acosh },
			{ "asinh", asinh },
			{ "atanh", atanh },
			{ "exp", exp },
			{ "frexp", frexp },
			{ "ldexp", ldexp },
			{ "log", log },
			{ "log10", log10 },
			{ "modf", modf },
			{ "exp2", exp2 },
			{ "expm1", expm1 },
			{ "ilogb", ilogb },
			{ "log1p", log1p },
			{ "log2", log2 },
			{ "logb", logb },
			{ "scalbn", scalbn },
			{ "scalbln", scalbln },
			{ "pow", pow },
			{ "sqrt", sqrt },
			{ "cbrt", cbrt },
			{ "hypot", hypot },
			{ "erf", erf },
			{ "erfc", erfc },
			{ "tgamma", tgamma },
			{ "lgamma", lgamma },
			{ "ceil", ceil },
			{ "floor", floor },
			{ "fmod", fmod },
			{ "trunc", trunc },
			{ "round", round },
			{ "lround", lround },
			{ "llround", llround },
			{ "rint", rint },
			{ "lrint", lrint },
			{ "llrint", llrint },
			{ "nearbyint", nearbyint },
			{ "remainder", remainder },
			{ "remquo", remquo },
			{ "copysign", copysign },
			{ "nan", nan },
			{ "nextafter", nextafter },
			{ "nexttoward", nexttoward },
			{ "fdim", fdim },
			{ "fmax", fmax },
			{ "fmin", fmin },
			{ "fabs", fabs },
			{ "abs", abs },
			{ "fma", fma },
			{ "fpclassify", fpclassify },
			{ "isfinite", isfinite },
			{ "isinf", isinf },
			{ "isnan", isnan },
			{ "isnormal", isnormal },
			{ "signbit", signbit },
			{ "isgreater", isgreater },
			{ "isgreaterequal", isgreaterequal },
			{ "isless", isless },
			{ "islessequal", islessequal },
			{ "islessgreater", islessgreater },
			{ "isunordered", isunordered },
			{ "math_errhandling", math_errhandling },
			{ "INFINITY", INFINITY },
			{ "NAN", NAN },
			{ "HUGE_VAL", HUGE_VAL },
			{ "HUGE_VALF", HUGE_VALF },
			{ "HUGE_VALL", HUGE_VALL },
			{ "double_t", double_t },
			{ "float_t", float_t },
			{ "longjmp", longjmp },
			{ "setjmp", setjmp },
			{ "jmp_buf", jmp_buf },
			{ "signal", signal },
			{ "raise", raise },
			{ "sig_atomic_t", sig_atomic_t },
			{ "va_list", va_list },
			{ "va_start", va_start },
			{ "va_arg", va_arg },
			{ "va_end", va_end },
			{ "va_copy", va_copy },
			{ "ptrdiff_t", ptrdiff_t },
			{ "size_t", size_t },
			{ "max_align_t", max_align_t },
			{ "nullptr_t", nullptr_t },
			{ "offsetof", offsetof },
			{ "NULL", NULL },
			{ "remove", remove },
			{ "rename", rename },
			{ "tmpfile", tmpfile },
			{ "tmpnam", tmpnam },
			{ "fclose", fclose },
			{ "fflush", fflush },
			{ "fopen", fopen },
			{ "freopen", freopen },
			{ "setbuf", setbuf },
			{ "setvbuf", setvbuf },
			{ "fprintf", fprintf },
			{ "fscanf", fscanf },
			{ "printf", printf },
			{ "scanf", scanf },
			{ "snprintf", snprintf },
			{ "sprintf", sprintf },
			{ "sscanf", sscanf },
			{ "vfprintf", vfprintf },
			{ "vfscanf", vfscanf },
			{ "vprintf", vprintf },
			{ "vscanf", vscanf },
			{ "vsnprintf", vsnprintf },
			{ "vsprintf", vsprintf },
			{ "vsscanf", vsscanf },
			{ "fgetc", fgetc },
			{ "fgets", fgets },
			{ "fputc", fputc },
			{ "fputs", fputs },
			{ "getc", getc },
			{ "getchar", getchar },
			{ "gets", gets },
			{ "putc", putc },
			{ "putchar", putchar },
			{ "puts", puts },
			{ "ungetc", ungetc },
			{ "fread", fread },
			{ "fwrite", fwrite },
			{ "fgetpos", fgetpos },
			{ "fseek", fseek },
			{ "fsetpos", fsetpos },
			{ "ftell", ftell },
			{ "rewind", rewind },
			{ "clearerr", clearerr },
			{ "feof", feof },
			{ "ferror", ferror },
			{ "perror", perror },
			{ "BUFSIZ", BUFSIZ },
			{ "EOF", EOF },
			{ "FILENAME_MAX", FILENAME_MAX },
			{ "FOPEN_MAX", FOPEN_MAX },
			{ "L_tmpnam", L_tmpnam },
			{ "TMP_MAX", TMP_MAX },
			{ "FILE", FILE },
			{ "fpos_t", fpos_t },
			{ "atof", atof },
			{ "atoi", atoi },
			{ "atol", atol },
			{ "atoll", atoll },
			{ "strtod", strtod },
			{ "strtof", strtof },
			{ "strtol", strtol },
			{ "strtold", strtold },
			{ "strtoll", strtoll },
			{ "strtoul", strtoul },
			{ "strtoull", strtoull },
			{ "rand", rand },
			{ "srand", srand },
			{ "calloc", calloc },
			{ "free", free },
			{ "malloc", malloc },
			{ "realloc", realloc },
			{ "abort", abort },
			{ "atexit", atexit },
			{ "at_quick_exit", at_quick_exit },
			{ "exit", exit },
			{ "getenv", getenv },
			{ "quick_exit", quick_exit },
			{ "system", system },
			{ "_Exit", _Exit },
			{ "bsearch", bsearch },
			{ "qsort", qsort },
			{ "div", div },
			{ "labs", labs },
			{ "ldiv", ldiv },
			{ "llabs", llabs },
			{ "lldiv", lldiv },
			{ "mblen", mblen },
			{ "mbtowc", mbtowc },
			{ "wctomb", wctomb },
			{ "mbstowcs", mbstowcs },
			{ "wcstombs", wcstombs },
			{ "EXIT_FAILURE", EXIT_FAILURE },
			{ "EXIT_SUCCESS", EXIT_SUCCESS },
			{ "MB_CUR_MAX", MB_CUR_MAX },
			{ "RAND_MAX", RAND_MAX },
			{ "div_t", div_t },
			{ "ldiv_t", ldiv_t },
			{ "lldiv_t", lldiv_t },
			{ "memcpy", memcpy },
			{ "memmove", memmove },
			{ "strcpy", strcpy },
			{ "strncpy", strncpy },
			{ "strcat", strcat },
			{ "strncat", strncat },
			{ "memcmp", memcmp },
			{ "strcmp", strcmp },
			{ "strcoll", strcoll },
			{ "strncmp", strncmp },
			{ "strxfrm", strxfrm },
			{ "memchr", memchr },
			{ "strchr", strchr },
			{ "strcspn", strcspn },
			{ "strpbrk", strpbrk },
			{ "strrchr", strrchr },
			{ "strspn", strspn },
			{ "strstr", strstr },
			{ "strtok", strtok },
			{ "memset", memset },
			{ "strerror", strerror },
			{ "strlen", strlen },
			{ "clock", clock },
			{ "difftime", difftime },
			{ "mktime", mktime },
			{ "time", time },
			{ "asctime", asctime },
			{ "ctime", ctime },
			{ "gmtime", gmtime },
			{ "localtime", localtime },
			{ "strftime", strftime },
			{ "CLOCKS_PER_SEC", CLOCKS_PER_SEC },
			{ "clock_t", clock_t },
			{ "time_t", time_t },
			{ "structtm", structtm },
			{ "c16rtomb", c16rtomb },
			{ "c32rtomb", c32rtomb },
			{ "mbrtoc16", mbrtoc16 },
			{ "mbrtoc32", mbrtoc32 },
			{ "fgetwc", fgetwc },
			{ "fgetws", fgetws },
			{ "fputwc", fputwc },
			{ "fputws", fputws },
			{ "fwide", fwide },
			{ "fwprintf", fwprintf },
			{ "fwscanf", fwscanf },
			{ "getwc", getwc },
			{ "getwchar", getwchar },
			{ "putwc", putwc },
			{ "putwchar", putwchar },
			{ "swprintf", swprintf },
			{ "swscanf", swscanf },
			{ "ungetwc", ungetwc },
			{ "vfwprintf", vfwprintf },
			{ "vfwscanf", vfwscanf },
			{ "vswprintf", vswprintf },
			{ "vswscanf", vswscanf },
			{ "vwprintf", vwprintf },
			{ "vwscanf", vwscanf },
			{ "wprintf", wprintf },
			{ "wscanf", wscanf },
			{ "wcstod", wcstod },
			{ "wcstof", wcstof },
			{ "wcstol", wcstol },
			{ "wcstold", wcstold },
			{ "wcstoll", wcstoll },
			{ "wcstoul", wcstoul },
			{ "wcstoull", wcstoull },
			{ "btowc", btowc },
			{ "mbrlen", mbrlen },
			{ "mbrtowc", mbrtowc },
			{ "mbsinit", mbsinit },
			{ "mbsrtowcs", mbsrtowcs },
			{ "wcrtomb", wcrtomb },
			{ "wctob", wctob },
			{ "wcsrtombs", wcsrtombs },
			{ "wcscat", wcscat },
			{ "wcschr", wcschr },
			{ "wcscmp", wcscmp },
			{ "wcscoll", wcscoll },
			{ "wcscpy", wcscpy },
			{ "wcscspn", wcscspn },
			{ "wcslen", wcslen },
			{ "wcsncat", wcsncat },
			{ "wcsncmp", wcsncmp },
			{ "wcsncpy", wcsncpy },
			{ "wcspbrk", wcspbrk },
			{ "wcsrchr", wcsrchr },
			{ "wcsspn", wcsspn },
			{ "wcsstr", wcsstr },
			{ "wcstok", wcstok },
			{ "wcsxfrm", wcsxfrm },
			{ "wmemchr", wmemchr },
			{ "wmemcmp", wmemcmp },
			{ "wmemcpy", wmemcpy },
			{ "wmemmove", wmemmove },
			{ "wmemset", wmemset },
			{ "wcsftime", wcsftime },
			{ "mbstate_t", mbstate_t },
			{ "wchar_t", wchar_t },
			{ "wint_t", wint_t },
			{ "WCHAR_MAX", WCHAR_MAX },
			{ "WCHAR_MIN", WCHAR_MIN },
			{ "WEOF", WEOF },
			{ "iswalnum", iswalnum },
			{ "iswalpha", iswalpha },
			{ "iswblank", iswblank },
			{ "iswcntrl", iswcntrl },
			{ "iswdigit", iswdigit },
			{ "iswgraph", iswgraph },
			{ "iswlower", iswlower },
			{ "iswprint", iswprint },
			{ "iswpunct", iswpunct },
			{ "iswspace", iswspace },
			{ "iswupper", iswupper },
			{ "iswxdigit", iswxdigit },
			{ "towlower", towlower },
			{ "towupper", towupper },
			{ "iswctype", iswctype },
			{ "towctrans", towctrans },
			{ "wctrans", wctrans },
			{ "wctype", wctype },
			{ "wctrans_t", wctrans_t },
			{ "wctype_t", wctype_t },
			{ "array", array },
			{ "end", end },
			{ "bitset", bitset },
			{ "deque", deque },
			{ "forward_list", forward_list },
			{ "list", list },
			{ "map", map },
			{ "multimap", multimap },
			{ "queue", queue },
			{ "priority_queue", priority_queue },
			{ "set", set },
			{ "multiset", multiset },
			{ "stack", stack },
			{ "unordered_map", unordered_map },
			{ "unordered_multimap", unordered_multimap },
			{ "unordered_set", unordered_set },
			{ "unordered_multiset", unordered_multiset },
			{ "vector", vector },
			{ "atomic", atomic },
			{ "atomic_flag", atomic_flag },
			{ "memory_order", memory_order },
			{ "kill_dependency", kill_dependency },
			{ "atomic_thread_fence", atomic_thread_fence },
			{ "atomic_signal_fence", atomic_signal_fence },
			{ "atomic_is_lock_free", atomic_is_lock_free },
			{ "atomic_init", atomic_init },
			{ "atomic_store", atomic_store },
			{ "atomic_store_explicit", atomic_store_explicit },
			{ "atomic_load", atomic_load },
			{ "atomic_load_explicit", atomic_load_explicit },
			{ "atomic_exchange", atomic_exchange },
			{ "atomic_exchange_explicit", atomic_exchange_explicit },
			{ "atomic_compare_exchange_weak", atomic_compare_exchange_weak },
			{ "atomic_compare_exchange_weak_explicit", atomic_compare_exchange_weak_explicit },
			{ "atomic_compare_exchange_strong", atomic_compare_exchange_strong },
			{ "atomic_compare_exchange_strong_explicit", atomic_compare_exchange_strong_explicit },
			{ "atomic_fetch_add", atomic_fetch_add },
			{ "atomic_fetch_add_explicit", atomic_fetch_add_explicit },
			{ "atomic_fetch_sub", atomic_fetch_sub },
			{ "atomic_fetch_sub_explicit", atomic_fetch_sub_explicit },
			{ "atomic_fetch_and", atomic_fetch_and },
			{ "atomic_fetch_and_explicit", atomic_fetch_and_explicit },
			{ "atomic_fetch_or", atomic_fetch_or },
			{ "atomic_fetch_or_explicit", atomic_fetch_or_explicit },
			{ "atomic_fetch_xor", atomic_fetch_xor },
			{ "atomic_fetch_xor_explicit", atomic_fetch_xor_explicit },
			{ "atomic_flag_test_and_set", atomic_flag_test_and_set },
			{ "atomic_flag_test_and_set_explicit", atomic_flag_test_and_set_explicit },
			{ "atomic_flag_clear", atomic_flag_clear },
			{ "atomic_flag_clear_explicit", atomic_flag_clear_explicit },
			{ "ATOMIC_VAR_INIT", ATOMIC_VAR_INIT },
			{ "ATOMIC_FLAG_INIT", ATOMIC_FLAG_INIT },
			{ "condition_variable", condition_variable },
			{ "condition_variable_any", condition_variable_any },
			{ "cv_status", cv_status },
			{ "notify_all_at_thread_exit", notify_all_at_thread_exit },
			{ "promise", promise },
			{ "packaged_task", packaged_task },
			{ "future", future },
			{ "shared_future", shared_future },
			{ "future_error", future_error },
			{ "future_errc", future_errc },
			{ "future_status", future_status },
			{ "launch", launch },
			{ "async", async },
			{ "future_category", future_category },
			{ "mutex", mutex },
			{ "recursive_mutex", recursive_mutex },
			{ "timed_mutex", timed_mutex },
			{ "recursive_timed_mutex", recursive_timed_mutex },
			{ "lock_guard", lock_guard },
			{ "unique_lock", unique_lock },
			{ "once_flag", once_flag },
			{ "adopt_lock_t", adopt_lock_t },
			{ "defer_lock_t", defer_lock_t },
			{ "try_to_lock_t", try_to_lock_t },
			{ "try_lock", try_lock },
			{ "lock", lock },
			{ "call_once", call_once },
			{ "thread", thread },
			{ "this_thread", this_thread },
			{ "all_of", all_of },
			{ "any_of", any_of },
			{ "none_of", none_of },
			{ "for_each", for_each },
			{ "find", find },
			{ "find_if", find_if },
			{ "find_if_not", find_if_not },
			{ "find_end", find_end },
			{ "find_first_of", find_first_of },
			{ "adjacent_find", adjacent_find },
			{ "count", count },
			{ "count_if", count_if },
			{ "mismatch", mismatch },
			{ "equal", equal },
			{ "is_permutation", is_permutation },
			{ "search", search },
			{ "search_n", search_n },
			{ "copy", copy },
			{ "copy_n", copy_n },
			{ "copy_if", copy_if },
			{ "copy_backward", copy_backward },
			{ "move", move },
			{ "move_backward", move_backward },
			{ "swap", swap },
			{ "swap_ranges", swap_ranges },
			{ "iter_swap", iter_swap },
			{ "transform", transform },
			{ "replace", replace },
			{ "replace_if", replace_if },
			{ "replace_copy", replace_copy },
			{ "replace_copy_if", replace_copy_if },
			{ "fill", fill },
			{ "fill_n", fill_n },
			{ "generate", generate },
			{ "generate_n", generate_n },
			{ "remove_if", remove_if },
			{ "remove_copy", remove_copy },
			{ "remove_copy_if", remove_copy_if },
			{ "unique", unique },
			{ "unique_copy", unique_copy },
			{ "reverse", reverse },
			{ "reverse_copy", reverse_copy },
			{ "rotate", rotate },
			{ "rotate_copy", rotate_copy },
			{ "random_shuffle", random_shuffle },
			{ "shuffle", shuffle },
			{ "is_partitioned", is_partitioned },
			{ "partition", partition },
			{ "stable_partition", stable_partition },
			{ "partition_copy", partition_copy },
			{ "partition_point", partition_point },
			{ "sort", sort },
			{ "stable_sort", stable_sort },
			{ "partial_sort", partial_sort },
			{ "partial_sort_copy", partial_sort_copy },
			{ "is_sorted", is_sorted },
			{ "is_sorted_until", is_sorted_until },
			{ "nth_element", nth_element },
			{ "lower_bound", lower_bound },
			{ "upper_bound", upper_bound },
			{ "equal_range", equal_range },
			{ "binary_search", binary_search },
			{ "merge", merge },
			{ "inplace_merge", inplace_merge },
			{ "includes", includes },
			{ "set_union", set_union },
			{ "set_intersection", set_intersection },
			{ "set_difference", set_difference },
			{ "set_symmetric_difference", set_symmetric_difference },
			{ "push_heap", push_heap },
			{ "pop_heap", pop_heap },
			{ "make_heap", make_heap },
			{ "sort_heap", sort_heap },
			{ "is_heap", is_heap },
			{ "is_heap_until", is_heap_until },
			{ "min", min },
			{ "max", max },
			{ "minmax", minmax },
			{ "min_element", min_element },
			{ "max_element", max_element },
			{ "minmax_element", minmax_element },
			{ "lexicographical_compare", lexicographical_compare },
			{ "next_permutation", next_permutation },
			{ "prev_permutation", prev_permutation },
			{ "duration", duration },
			{ "time_point", time_point },
			{ "system_clock", system_clock },
			{ "steady_clock", steady_clock },
			{ "high_resolution_clock", high_resolution_clock },
			{ "treat_as_floating_point", treat_as_floating_point },
			{ "duration_values", duration_values },
			{ "common_type(duration)***", common_type(duration)*** },
			{ "duration_cast", duration_cast },
			{ "time_point_cast", time_point_cast },
			{ "hours", hours },
			{ "minutes", minutes },
			{ "seconds", seconds },
			{ "milliseconds", milliseconds },
			{ "microseconds", microseconds },
			{ "nanoseconds", nanoseconds },
			{ "codecvt_mode", codecvt_mode },
			{ "codecvt_utf8", codecvt_utf8 },
			{ "codecvt_utf16", codecvt_utf16 },
			{ "codecvt_utf8_utf16", codecvt_utf8_utf16 },
			{ "complex", complex },
			{ "real", real },
			{ "imag", imag },
			{ "arg", arg },
			{ "norm", norm },
			{ "conj", conj },
			{ "polar", polar },
			{ "proj", proj },
			{ "complexoperators", complexoperators },
			{ "exception", exception },
			{ "bad_exception", bad_exception },
			{ "nested_exception", nested_exception },
			{ "exception_ptr", exception_ptr },
			{ "terminate_handler", terminate_handler },
			{ "unexpected_handler", unexpected_handler },
			{ "terminate", terminate },
			{ "get_terminate", get_terminate },
			{ "set_terminate", set_terminate },
			{ "unexpected", unexpected },
			{ "get_unexpected", get_unexpected },
			{ "set_unexpected", set_unexpected },
			{ "uncaught_exception", uncaught_exception },
			{ "current_exception", current_exception },
			{ "rethrow_exception", rethrow_exception },
			{ "make_exception_ptr", make_exception_ptr },
			{ "throw_with_nested", throw_with_nested },
			{ "rethrow_if_nested", rethrow_if_nested },
			{ "unary_function", unary_function },
			{ "binary_function", binary_function },
			{ "initializer_list", initializer_list },
			{ "advance", advance },
			{ "distance", distance },
			{ "prev", prev },
			{ "next", next },
			{ "back_inserter", back_inserter },
			{ "front_inserter", front_inserter },
			{ "inserter", inserter },
			{ "make_move_iterator", make_move_iterator },
			{ "iterator", iterator },
			{ "iterator_traits", iterator_traits },
			{ "reverse_iterator", reverse_iterator },
			{ "move_iterator", move_iterator },
			{ "back_insert_iterator", back_insert_iterator },
			{ "front_insert_iterator", front_insert_iterator },
			{ "insert_iterator", insert_iterator },
			{ "istream_iterator", istream_iterator },
			{ "ostream_iterator", ostream_iterator },
			{ "istreambuf_iterator", istreambuf_iterator },
			{ "ostreambuf_iterator", ostreambuf_iterator },
			{ "input_iterator_tag", input_iterator_tag },
			{ "output_iterator_tag", output_iterator_tag },
			{ "forward_iterator_tag", forward_iterator_tag },
			{ "bidirectional_iterator_tag", bidirectional_iterator_tag },
			{ "random_access_iterator_tag", random_access_iterator_tag },
			{ "numeric_limits", numeric_limits },
			{ "float_round_style", float_round_style },
			{ "float_denorm_style", float_denorm_style },
			{ "use_facet", use_facet },
			{ "has_facet", has_facet },
			{ "isalnum", isalnum },
			{ "locale", locale },
			{ "ctype", ctype },
			{ "ctype_byname", ctype_byname },
			{ "codecvt", codecvt },
			{ "codecvt_byname", codecvt_byname },
			{ "num_get", num_get },
			{ "num_put", num_put },
			{ "numpunct", numpunct },
			{ "numpunct_byname", numpunct_byname },
			{ "collate", collate },
			{ "collate_byname", collate_byname },
			{ "time_get", time_get },
			{ "time_get_byname", time_get_byname },
			{ "time_put", time_put },
			{ "time_put_byname", time_put_byname },
			{ "money_get", money_get },
			{ "money_put", money_put },
			{ "moneypunct", moneypunct },
			{ "moneypunct_byname", moneypunct_byname },
			{ "messages", messages },
			{ "messages_byname", messages_byname },
			{ "ctype_base", ctype_base },
			{ "codecvt_base", codecvt_base },
			{ "time_base", time_base },
			{ "money_base", money_base },
			{ "allocator", allocator },
			{ "allocator_arg", allocator_arg },
			{ "allocator_arg_t", allocator_arg_t },
			{ "allocator_traits", allocator_traits },
			{ "auto_ptr", auto_ptr },
			{ "auto_ptr_ref", auto_ptr_ref },
			{ "shared_ptr", shared_ptr },
			{ "weak_ptr", weak_ptr },
			{ "unique_ptr", unique_ptr },
			{ "default_delete", default_delete },
			{ "make_shared", make_shared },
			{ "allocate_shared", allocate_shared },
			{ "static_pointer_cast", static_pointer_cast },
			{ "dynamic_pointer_cast", dynamic_pointer_cast },
			{ "const_pointer_cast", const_pointer_cast },
			{ "get_deleter", get_deleter },
			{ "owner_less", owner_less },
			{ "enable_shared_from_this", enable_shared_from_this },
			{ "raw_storage_iterator", raw_storage_iterator },
			{ "get_temporary_buffer", get_temporary_buffer },
			{ "return_temporary_buffer", return_temporary_buffer },
			{ "uninitialized_copy", uninitialized_copy },
			{ "uninitialized_copy_n", uninitialized_copy_n },
			{ "uninitialized_fill", uninitialized_fill },
			{ "uninitialized_fill_n", uninitialized_fill_n },
			{ "pointer_traits", pointer_traits },
			{ "pointer_safety", pointer_safety },
			{ "declare_reachable", declare_reachable },
			{ "undeclare_reachable", undeclare_reachable },
			{ "declare_no_pointers", declare_no_pointers },
			{ "undeclare_no_pointers", undeclare_no_pointers },
			{ "get_pointer_safety", get_pointer_safety },
			{ "align", align },
			{ "addressof", addressof },
			{ "operatornew", operatornew },
			{ "operatornew[]", operatornew[] },
			{ "operatordelete", operatordelete },
			{ "operatordelete[]", operatordelete[] },
			{ "set_new_handler", set_new_handler },
			{ "get_new_handler", get_new_handler },
			{ "nothrow_t", nothrow_t },
			{ "new_handler", new_handler },
			{ "bad_alloc", bad_alloc },
			{ "bad_array_new_length", bad_array_new_length },
			{ "nothrow", nothrow },
			{ "accumulate", accumulate },
			{ "adjacent_difference", adjacent_difference },
			{ "inner_product", inner_product },
			{ "partial_sum", partial_sum },
			{ "iota", iota },
			{ "linear_congruential_engine", linear_congruential_engine },
			{ "mersenne_twister_engine", mersenne_twister_engine },
			{ "subtract_with_carry_engine", subtract_with_carry_engine },
			{ "discard_block_engine", discard_block_engine },
			{ "independent_bits_engine", independent_bits_engine },
			{ "shuffle_order_engine", shuffle_order_engine },
			{ "default_random_engine", default_random_engine },
			{ "minstd_rand", minstd_rand },
			{ "minstd_rand0", minstd_rand0 },
			{ "mt19937", mt19937 },
			{ "mt19937_64", mt19937_64 },
			{ "ranlux24_base", ranlux24_base },
			{ "ranlux48_base", ranlux48_base },
			{ "ranlux24", ranlux24 },
			{ "ranlux48", ranlux48 },
			{ "knuth_b", knuth_b },
			{ "random_device", random_device },
			{ "uniform_int_distribution", uniform_int_distribution },
			{ "uniform_real_distribution", uniform_real_distribution },
			{ "bernoulli_distribution", bernoulli_distribution },
			{ "binomial_distribution", binomial_distribution },
			{ "geometric_distribution", geometric_distribution },
			{ "negative_binomial_distribution", negative_binomial_distribution },
			{ "poisson_distribution", poisson_distribution },
			{ "exponential_distribution", exponential_distribution },
			{ "gamma_distribution", gamma_distribution },
			{ "weibull_distribution", weibull_distribution },
			{ "extreme_value_distribution", extreme_value_distribution },
			{ "normal_distribution", normal_distribution },
			{ "lognormal_distribution", lognormal_distribution },
			{ "chi_squared_distribution", chi_squared_distribution },
			{ "cauchy_distribution", cauchy_distribution },
			{ "fisher_f_distribution", fisher_f_distribution },
			{ "student_t_distribution", student_t_distribution },
			{ "discrete_distribution", discrete_distribution },
			{ "piecewise_constant_distribution", piecewise_constant_distribution },
			{ "piecewise_linear_distribution", piecewise_linear_distribution },
			{ "seed_seq", seed_seq },
			{ "generate_canonical", generate_canonical },
			{ "ratio", ratio },
			{ "ratio_add", ratio_add },
			{ "ratio_subtract", ratio_subtract },
			{ "ratio_multiply", ratio_multiply },
			{ "ratio_divide", ratio_divide },
			{ "ratio_equal", ratio_equal },
			{ "ratio_not_equal", ratio_not_equal },
			{ "ratio_less", ratio_less },
			{ "ratio_less_equal", ratio_less_equal },
			{ "ratio_greater", ratio_greater },
			{ "ratio_greater_equal", ratio_greater_equal },
			{ "regex_match", regex_match },
			{ "regex_search", regex_search },
			{ "regex_replace", regex_replace },
			{ "regex_iterator", regex_iterator },
			{ "regex_token_iterator", regex_token_iterator },
			{ "basic_regex", basic_regex },
			{ "match_results", match_results },
			{ "sub_match", sub_match },
			{ "regex_traits", regex_traits },
			{ "regex_error", regex_error },
			{ "regex", regex },
			{ "wregex", wregex },
			{ "cmatch", cmatch },
			{ "wcmatch", wcmatch },
			{ "smatch", smatch },
			{ "wsmatch", wsmatch },
			{ "csub_match", csub_match },
			{ "wcsub_match", wcsub_match },
			{ "ssub_match", ssub_match },
			{ "wssub_match", wssub_match },
			{ "regex_constants", regex_constants },
			{ "ECMAScriptsyntax", ECMAScriptsyntax },
			{ "begin", begin },
			{ "logic_error", logic_error },
			{ "domain_error", domain_error },
			{ "invalid_argument", invalid_argument },
			{ "length_error", length_error },
			{ "out_of_range", out_of_range },
			{ "runtime_error", runtime_error },
			{ "range_error", range_error },
			{ "overflow_error", overflow_error },
			{ "underflow_error", underflow_error },
			{ "basic_string", basic_string },
			{ "char_traits", char_traits },
			{ "string", string },
			{ "u16string", u16string },
			{ "u32string", u32string },
			{ "wstring", wstring },
			{ "stoi", stoi },
			{ "stol", stol },
			{ "stoul", stoul },
			{ "stoll", stoll },
			{ "stoull", stoull },
			{ "stof", stof },
			{ "stod", stod },
			{ "stold", stold },
			{ "to_string", to_string },
			{ "to_wstring", to_wstring },
			{ "error_category", error_category },
			{ "error_code", error_code },
			{ "error_condition", error_condition },
			{ "system_error", system_error },
			{ "is_error_code_enum", is_error_code_enum },
			{ "is_error_condition_enum", is_error_condition_enum },
			{ "errc", errc },
			{ "generic_category", generic_category },
			{ "system_category", system_category },
			{ "make_error_code", make_error_code },
			{ "make_error_condition", make_error_condition },
			{ "tuple", tuple },
			{ "tuple_size", tuple_size },
			{ "tuple_element", tuple_element },
			{ "make_tuple", make_tuple },
			{ "forward_as_tuple", forward_as_tuple },
			{ "tie", tie },
			{ "tuple_cat", tuple_cat },
			{ "get", get },
			{ "ignore", ignore },
			{ "type_index", type_index },
			{ "hash", hash },
			{ "type_info", type_info },
			{ "bad_cast", bad_cast },
			{ "bad_typeid", bad_typeid },
			{ "integral_constant", integral_constant },
			{ "true_type", true_type },
			{ "false_type", false_type },
			{ "is_array", is_array },
			{ "is_class", is_class },
			{ "is_enum", is_enum },
			{ "is_floating_point", is_floating_point },
			{ "is_function", is_function },
			{ "is_integral", is_integral },
			{ "is_lvalue_reference", is_lvalue_reference },
			{ "is_member_function_pointer", is_member_function_pointer },
			{ "is_member_object_pointer", is_member_object_pointer },
			{ "is_pointer", is_pointer },
			{ "is_rvalue_reference", is_rvalue_reference },
			{ "is_union", is_union },
			{ "is_void", is_void },
			{ "is_arithmetic", is_arithmetic },
			{ "is_compound", is_compound },
			{ "is_fundamental", is_fundamental },
			{ "is_member_pointer", is_member_pointer },
			{ "is_object", is_object },
			{ "is_reference", is_reference },
			{ "is_scalar", is_scalar },
			{ "is_abstract", is_abstract },
			{ "is_const", is_const },
			{ "is_empty", is_empty },
			{ "is_literal_type", is_literal_type },
			{ "is_pod", is_pod },
			{ "is_polymorphic", is_polymorphic },
			{ "is_signed", is_signed },
			{ "is_standard_layout", is_standard_layout },
			{ "is_trivial", is_trivial },
			{ "is_trivially_copyable", is_trivially_copyable },
			{ "is_unsigned", is_unsigned },
			{ "is_volatile", is_volatile },
			{ "has_virtual_destructor", has_virtual_destructor },
			{ "is_assignable", is_assignable },
			{ "is_constructible", is_constructible },
			{ "is_copy_assignable", is_copy_assignable },
			{ "is_copy_constructible", is_copy_constructible },
			{ "is_destructible", is_destructible },
			{ "is_default_constructible", is_default_constructible },
			{ "is_move_assignable", is_move_assignable },
			{ "is_move_constructible", is_move_constructible },
			{ "is_trivially_assignable", is_trivially_assignable },
			{ "is_trivially_constructible", is_trivially_constructible },
			{ "is_trivially_copy_assignable", is_trivially_copy_assignable },
			{ "is_trivially_copy_constructible", is_trivially_copy_constructible },
			{ "is_trivially_destructible", is_trivially_destructible },
			{ "is_trivially_default_constructible", is_trivially_default_constructible },
			{ "is_trivially_move_assignable", is_trivially_move_assignable },
			{ "is_trivially_move_constructible", is_trivially_move_constructible },
			{ "is_nothrow_assignable", is_nothrow_assignable },
			{ "is_nothrow_constructible", is_nothrow_constructible },
			{ "is_nothrow_copy_assignable", is_nothrow_copy_assignable },
			{ "is_nothrow_copy_constructible", is_nothrow_copy_constructible },
			{ "is_nothrow_destructible", is_nothrow_destructible },
			{ "is_nothrow_default_constructible", is_nothrow_default_constructible },
			{ "is_nothrow_move_assignable", is_nothrow_move_assignable },
			{ "is_nothrow_move_constructible", is_nothrow_move_constructible },
			{ "is_base_of", is_base_of },
			{ "is_convertible", is_convertible },
			{ "is_same", is_same },
			{ "alignment_of", alignment_of },
			{ "extent", extent },
			{ "rank", rank },
			{ "add_const", add_const },
			{ "add_cv", add_cv },
			{ "add_volatile", add_volatile },
			{ "remove_const", remove_const },
			{ "remove_cv", remove_cv },
			{ "remove_volatile", remove_volatile },
			{ "add_pointer", add_pointer },
			{ "add_lvalue_reference", add_lvalue_reference },
			{ "add_rvalue_reference", add_rvalue_reference },
			{ "decay", decay },
			{ "make_signed", make_signed },
			{ "make_unsigned", make_unsigned },
			{ "remove_all_extents", remove_all_extents },
			{ "remove_extent", remove_extent },
			{ "remove_pointer", remove_pointer },
			{ "remove_reference", remove_reference },
			{ "underlying_type", underlying_type },
			{ "aligned_storage", aligned_storage },
			{ "aligned_union", aligned_union },
			{ "common_type", common_type },
			{ "conditional", conditional },
			{ "enable_if", enable_if },
			{ "result_of", result_of },
			{ "valarray", valarray },
			{ "slice", slice },
			{ "gslice", gslice },
			{ "slice_array", slice_array },
			{ "gslice_array", gslice_array },
			{ "mask_array", mask_array },
			{ "indirect_array", indirect_array },
			{ "Valarray_operators", Valarray_operators }
		};
		auto itr = optionStrings.find(input);
		if( itr != optionStrings.end() ) {
			return *itr;
		}
    return Option_Invalid;
	}
}
